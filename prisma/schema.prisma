generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model notifications {
  id                 Int                  @id @default(autoincrement())
  title              String               @default("General Notification")
  type               notifications_type
  message            String               @db.Text
  created_at         DateTime?            @default(now()) @db.Timestamp(0)
  user_notifications user_notifications[]
}

model user_notifications {
  id              Int                        @id @default(autoincrement())
  user_id         Int?
  notification_id Int?
  status          user_notifications_status? @default(pending)
  is_read         Boolean                    @default(false)
  read_at         DateTime?
  is_deleted      Boolean                    @default(false)
  created_at      DateTime?                  @default(now()) @db.Timestamp(0)
  users           users?                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_notifications_ibfk_1")
  notifications   notifications?             @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_notifications_ibfk_2")

  @@index([notification_id], map: "notification_id")
  @@index([user_id], map: "user_id")
}

model users {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  email              String               @unique(map: "email") @db.VarChar(255)
  phone              String?              @unique(map: "phone") @db.VarChar(20)
  password           String               @db.VarChar(255)
  created_at         DateTime?            @default(now()) @db.Timestamp(0)
  user_notifications user_notifications[]
  refresh_tokens     refresh_token[]
}

model refresh_token {
  id         String    @id @default(uuid())
  token      String // Store hashed token
  user       users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  revoked    Boolean   @default(false)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  userAgent  String? // browser info or client platform
  ipAddress  String? // to trace source

  @@index([token])
}

enum notifications_type {
  email
  sms
  push
}

enum user_notifications_status {
  sent
  pending
  failed
}
